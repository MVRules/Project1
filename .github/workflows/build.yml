name: Build & Deploy via OpenAI

on:
  repository_dispatch:
    types: [build_app, revise_app]
  workflow_dispatch:
    inputs:
      email:
        description: 'Student email'
        required: true
      secret:
        description: 'Your BUILD_SECRET'
        required: true
      task:
        description: 'Task name'
        required: true
      round:
        description: 'Round number'
        required: true
        default: '1'
      brief:
        description: 'App brief'
        required: true
      evaluation_url:
        description: 'Evaluation endpoint URL'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Save request payload
        run: |
          # Detect trigger type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "{\"email\": \"${{ github.event.inputs.email }}\", \"secret\": \"${{ github.event.inputs.secret }}\", \"task\": \"${{ github.event.inputs.task }}\", \"round\": ${{ github.event.inputs.round }}, \"brief\": \"${{ github.event.inputs.brief }}\", \"evaluation_url\": \"${{ github.event.inputs.evaluation_url }}\"}" > request.json
          else
            echo '${{ toJson(github.event.client_payload) }}' > request.json
          fi
          cat request.json

      - name: Verify secret
        run: |
          SECRET_REQ=$(jq -r '.secret' request.json)
          if [ "$SECRET_REQ" != "${{ secrets.BUILD_SECRET }}" ]; then
            echo "❌ Secret mismatch"
            exit 1
          fi
          echo "✅ Secret verified"

      - name: Install dependencies
        run: npm install openai@^4.0.0

      - name: Run OpenAI generator
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/generate.js

      - name: Commit & push generated files
        run: |
          git config user.name "github-actions"
          git config user.email "action@github.com"
          git add .
          git commit -m "Auto generate for round ${{ github.event.inputs.round }}" || echo "No changes to commit"
          git push origin HEAD

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

      - name: Send evaluation POST with retry
        run: |
          EMAIL=$(jq -r '.email' request.json)
          TASK=$(jq -r '.task' request.json)
          ROUND=$(jq -r '.round' request.json)
          NONCE=$(jq -r '.nonce // "manual"' request.json)
          EVAL_URL=$(jq -r '.evaluation_url' request.json)
          REPO_URL="https://github.com/${{ github.repository }}"
          COMMIT_SHA=$(git rev-parse HEAD)
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

          DATA=$(jq -n \
            --arg email "$EMAIL" \
            --arg task "$TASK" \
            --argjson round "$ROUND" \
            --arg nonce "$NONCE" \
            --arg repo_url "$REPO_URL" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg pages_url "$PAGES_URL" \
            '{email: $email, task: $task, round: $round, nonce: $nonce, repo_url: $repo_url, commit_sha: $commit_sha, pages_url: $pages_url}')

          echo "Payload to evaluator:"
          echo "$DATA"

          ATTEMPTS=5
          DELAY=1
          i=1
          while [ $i -le $ATTEMPTS ]; do
            echo "Attempt $i to POST to $EVAL_URL"
            HTTP_CODE=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$DATA" "$EVAL_URL" || echo "000")
            echo "HTTP code: $HTTP_CODE"
            if [ "$HTTP_CODE" = "200" ]; then
              echo "Evaluator acknowledged (200)."
              exit 0
            fi
            echo "Not 200. Sleeping $DELAY seconds before retry..."
            sleep $DELAY
            DELAY=$((DELAY * 2))
            i=$((i + 1))
          done

          echo "Failed to notify evaluator after $ATTEMPTS attempts."
          exit 1
